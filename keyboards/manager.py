from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import locale
from utils.common import WEEKDAY_SHORTCUTS, MONTH_SHORTCUTS

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")

def manager_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–ª–∏ manager
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –ù–æ–≤—ã–π —Å–ª–æ—Ç"), KeyboardButton(text="üìã –ú–æ–∏ —Å–ª–æ—Ç—ã")],  # –ü–µ—Ä–≤—ã–π —Ä—è–¥
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],  # –í—Ç–æ—Ä–æ–π —Ä—è–¥
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

def generate_date_inline_keyboard():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ 5 —Ä–∞–±–æ—á–∏–º–∏ –¥–Ω—è–º–∏ –≤ –≤–∏–¥–µ Inline-–∫–Ω–æ–ø–æ–∫.
    """
    keyboard = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    today = datetime.now()
    added_days = 0  # –°—á–µ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π

    while added_days < 5:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        day = today + timedelta(days=added_days)
        weekday = day.weekday()  # 0 = –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

        if weekday < 5:  # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —Å—É–±–±–æ—Ç–∞ (5) –∏ –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6)
            button_text = day.strftime("%A, %d %B")  # –ü—Ä–∏–º–µ—Ä: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 05 –∏—é–Ω—è"
            callback_data = f"select_date:{day.strftime('%Y-%m-%d')}"  # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "%Y-%m-%d"
            keyboard.append([InlineKeyboardButton(text=button_text.capitalize(), callback_data=callback_data)])
        else:
            # –ï—Å–ª–∏ –¥–µ–Ω—å —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            today += timedelta(days=1)
            continue

        added_days += 1

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def generate_time_keyboard() -> ReplyKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —á–∞—Å–∞–º–∏ (—Å 09:00 –¥–æ 17:00) –≤ 3 —Å—Ç–æ–ª–±—Ü–∞.
    """
    keyboard = []
    row = []
    for hour in range(9, 18):  # –ß–∞—Å—ã —Å 09:00 –¥–æ 17:00
        button_text = f"{hour:02d}:00"
        row.append(KeyboardButton(text=button_text))
        if len(row) == 3:  # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ 3 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        keyboard.append(row)
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def generate_time_inline_keyboard():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —á–∞—Å–∞–º–∏ (—Å 09:00 –¥–æ 17:00) –≤ –≤–∏–¥–µ Inline-–∫–Ω–æ–ø–æ–∫ (3 —Ä—è–¥–∞, 3 —Å—Ç—Ä–æ–∫–∏).
    """
    keyboard = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫
    row = []  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
    for hour in range(9, 18):  # –ß–∞—Å—ã —Å 09:00 –¥–æ 17:00
        button_text = f"{hour:02d}:00"
        callback_data = f"select_time:{hour:02d}:00"  # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data
        row.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
        
        if len(row) == 3:  # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ 3 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.append(row)
            row = []  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø—ã –∫–Ω–æ–ø–æ–∫
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        keyboard.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def generate_slots_keyboard(slots):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤.
    :param slots: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ LunchSlot.
    :return: InlineKeyboardMarkup.
    """
    inline_keyboard = []
    for slot in slots:
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü
        weekday = WEEKDAY_SHORTCUTS[slot.date.strftime("%A")]
        month = MONTH_SHORTCUTS[slot.date.strftime("%m")]
        formatted_date = f"{weekday}, {slot.date.day} {month}"
        formatted_time = slot.start_time.strftime("%H:%M")
        button_text = f"{formatted_date}, {formatted_time}"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Å–ª–æ—Ç–∞
        detail_button = InlineKeyboardButton(
            text=button_text,
            callback_data=f"slot_detail:{slot.id}"
        )
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞
        delete_button = InlineKeyboardButton(
            text="‚ùå",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            callback_data=f"delete_slot:{slot.id}"
        )
        inline_keyboard.append([detail_button, delete_button])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)