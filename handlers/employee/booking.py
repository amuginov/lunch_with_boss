from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states.user_states import LunchBookingStates
from db.crud import get_all_users, get_all_lunch_slots
from db.database import SessionLocal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SessionLocal
from db.models import LunchSlot, User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LunchSlot –∏ User
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import time  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º time

router = Router()

@router.message(F.text == "üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–µ–¥")
async def start_booking(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–µ–¥–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    managers = [user for user in get_all_users() if user.role == "manager"]

    if not managers:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=manager.full_name)] for manager in managers],
        resize_keyboard=True
    )

    await message.answer("–° –∫–µ–º –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–µ–¥?", reply_markup=keyboard)
    await state.set_state(LunchBookingStates.waiting_for_manager)


@router.message(LunchBookingStates.waiting_for_manager)
async def choose_manager(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    selected_manager = message.text
    await state.update_data(manager=selected_manager)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    all_slots = get_all_lunch_slots()
    available_slots = [
        slot for slot in all_slots
        if slot.manager.full_name == selected_manager and not slot.is_booked
    ]

    if not available_slots:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{slot.date} {slot.start_time}")] for slot in available_slots],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(LunchBookingStates.waiting_for_slot)


@router.message(LunchBookingStates.waiting_for_slot)
async def book_slot(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞.
    """
    selected_slot = message.text
    slot_data = await state.get_data()

    with SessionLocal() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
            manager = session.query(User).filter(User.full_name == slot_data["manager"]).first()
            if not manager:
                print(f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å –∏–º–µ–Ω–µ–º {slot_data['manager']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return

            # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç: {selected_slot}")
            print(f"–î–∞—Ç–∞: {selected_slot.split()[0]}, –í—Ä–µ–º—è: {selected_slot.split()[1]}")
            print(f"–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: –î–∞—Ç–∞={type(selected_slot.split()[0])}, –í—Ä–µ–º—è={type(selected_slot.split()[1])}")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç time
            selected_time = time.fromisoformat(selected_slot.split()[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç –ø–æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            slot = session.query(LunchSlot).filter(
                LunchSlot.date == selected_slot.split()[0],
                LunchSlot.start_time == selected_time,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
                LunchSlot.manager_id == manager.id,
                LunchSlot.is_booked == False  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ª–æ—Ç –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω
            ).first()

            if slot:
                print(f"–°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω: ID={slot.id}, –¥–∞—Ç–∞={slot.date}, –≤—Ä–µ–º—è={slot.start_time}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç
                slot.is_booked = True
                slot.booked_by_user_id = int(message.from_user.id)
                session.commit()
                print(f"–°–ª–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: ID={slot.id}, booked_by_user_id={slot.booked_by_user_id}")
                await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –æ–±–µ–¥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {slot_data['manager']} –Ω–∞ {selected_slot}.")
            else:
                print(f"–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. –î–∞—Ç–∞: {selected_slot.split()[0]}, –í—Ä–µ–º—è: {selected_slot.split()[1]}, –ú–µ–Ω–µ–¥–∂–µ—Ä ID: {manager.id}")
                await message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        finally:
            await state.clear()


@router.message(F.text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
async def view_bookings(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_telegram_id = message.from_user.id

    with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é "user" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user = session.query(User).filter(User.telegram_id == user_telegram_id, User.role == "user").first()
        if not user:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {user_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏ 'user'.")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")
            return

        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={user.id}, Telegram ID={user.telegram_id}")

        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bookings = session.query(LunchSlot).filter(LunchSlot.booked_by_user_id == user.telegram_id).all()
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {bookings}")

        if not bookings:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        response = "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        for booking in bookings:
            response += (
                f"- –ú–µ–Ω–µ–¥–∂–µ—Ä: {booking.manager.full_name}, "
                f"–î–∞—Ç–∞: {booking.date}, –í—Ä–µ–º—è: {booking.start_time}\n"
            )

        await message.answer(response)