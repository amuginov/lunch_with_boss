from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states.user_states import LunchBookingStates
from db.crud import get_all_users, get_all_lunch_slots
from db.database import SessionLocal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SessionLocal
from db.models import LunchSlot, User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LunchSlot –∏ User
from aiogram.utils.keyboard import ReplyKeyboardBuilder

router = Router()

@router.message(F.text == "üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–µ–¥")
async def start_booking(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–µ–¥–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    managers = [user for user in get_all_users() if user.role == "manager"]

    if not managers:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=manager.full_name)] for manager in managers],
        resize_keyboard=True
    )

    await message.answer("–° –∫–µ–º –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–µ–¥?", reply_markup=keyboard)
    await state.set_state(LunchBookingStates.waiting_for_manager)


@router.message(LunchBookingStates.waiting_for_manager)
async def choose_manager(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    selected_manager = message.text
    await state.update_data(manager=selected_manager)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    all_slots = get_all_lunch_slots()
    available_slots = [
        slot for slot in all_slots
        if slot.manager.full_name == selected_manager and not slot.is_booked
    ]

    if not available_slots:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{slot.date} {slot.start_time}")] for slot in available_slots],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(LunchBookingStates.waiting_for_slot)


@router.message(LunchBookingStates.waiting_for_slot)
async def book_slot(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞.
    """
    selected_slot = message.text
    slot_data = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
        manager = session.query(User).filter(User.full_name == slot_data["manager"]).first()
        if not manager:
            await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç –ø–æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        slot = session.query(LunchSlot).filter(
            LunchSlot.date == selected_slot.split()[0],
            LunchSlot.start_time == selected_slot.split()[1],
            LunchSlot.manager_id == manager.id
        ).first()

        if slot:
            slot.is_booked = True
            session.commit()
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –æ–±–µ–¥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {slot_data['manager']} –Ω–∞ {selected_slot}.")
        else:
            await message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.")

    await state.clear()