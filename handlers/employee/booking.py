from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from states.user_states import LunchBookingStates
from keyboards.employee import generate_booking_keyboard, generate_slots_keyboard, employee_keyboard
from utils.common import return_to_main_menu, WEEKDAY_SHORTCUTS, MONTH_SHORTCUTS
from services.booking_service import (
    get_available_managers,
    get_available_slots,
    book_slot,
    get_user_bookings,
    delete_booking,
    get_booking_details,
)
from db.database import SessionLocal  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from db.models import User

router = Router()

@router.message(F.text == "üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–µ–¥")
async def start_booking(message: Message, state: FSMContext):
    managers = await get_available_managers()

    if not managers:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{manager.last_name} {manager.first_name} {manager.middle_name or ''}".strip(),
                    callback_data=f"select_manager:{manager.id}"
                )
            ]
            for manager in managers
        ]
    )

    await message.answer("–° –∫–µ–º –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–µ–¥?", reply_markup=keyboard)
    await state.set_state(LunchBookingStates.waiting_for_manager)


@router.callback_query(F.data.startswith("select_manager:"))
async def choose_manager(callback: CallbackQuery, state: FSMContext):
    manager_id = int(callback.data.split(":")[1])
    await state.update_data(manager_id=manager_id)

    available_slots = await get_available_slots(manager_id)

    if not available_slots:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    keyboard = generate_slots_keyboard(available_slots)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(LunchBookingStates.waiting_for_slot)


@router.callback_query(F.data.startswith("select_slot:"))
async def book_slot_handler(callback: CallbackQuery, state: FSMContext):
    slot_id = int(callback.data.split(":")[1])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with SessionLocal() as session:
            user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
            if not user or not user.email:
                raise ValueError("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        # –ü–µ—Ä–µ–¥–∞—ë–º e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        slot_data = await book_slot(slot_id, user.id, user.email)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        await callback.message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –æ–±–µ–¥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {slot_data['manager_name']} "
            f"–Ω–∞ {slot_data['date']} –≤ {slot_data['start_time']}."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        manager_telegram_id = slot_data["manager_telegram_id"]
        weekday = WEEKDAY_SHORTCUTS[slot_data["date"].strftime("%A").lower()]
        month = MONTH_SHORTCUTS[slot_data["date"].strftime("%m")]
        formatted_date = f"{weekday}, {slot_data['date'].day} {month}"
        formatted_time = slot_data["start_time"].strftime("%H:%M")

        await callback.bot.send_message(
            chat_id=manager_telegram_id,
            text=(
                f"{user.last_name} {user.first_name} {user.middle_name or ''} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –æ–±–µ–¥ —Å –í–∞–º–∏ "
                f"–Ω–∞ {formatted_date}, {formatted_time}."
            )
        )
    except ValueError as e:
        await callback.message.answer(str(e))
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    finally:
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ return_to_main_menu
        await return_to_main_menu(callback.message, "employee", employee_keyboard())
        await state.clear()


@router.message(F.text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
async def view_bookings(message: Message):
    user_telegram_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
        bookings = await get_user_bookings(user_telegram_id)

        if not bookings:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
        keyboard = generate_booking_keyboard(bookings)
        await message.answer("–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")


@router.callback_query(F.data.startswith("delete_booking:"))
async def delete_booking_handler(callback: CallbackQuery):
    booking_id = int(callback.data.split(":")[1])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with SessionLocal() as session:
            user = session.query(User).filter(User.telegram_id == callback.from_user.id).first()
            if not user or not user.email:
                raise ValueError("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await delete_booking(booking_id, user.email)
        await callback.message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ. –°–ª–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ return_to_main_menu
        await return_to_main_menu(callback.message, "employee", employee_keyboard())
    except ValueError as e:
        await callback.message.answer(str(e))
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


@router.callback_query(F.data.startswith("detail_booking:"))
async def booking_details_handler(callback: CallbackQuery):
    booking_id = int(callback.data.split(":")[1])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_details = await get_booking_details(booking_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        response = (
            f"–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            f"- –î–∞—Ç–∞: {booking_details['date']}\n"
            f"- –í—Ä–µ–º—è: {booking_details['start_time']} - {booking_details['end_time']}\n"
            f"- –ú–µ–Ω–µ–¥–∂–µ—Ä: {booking_details['manager_name']}"
        )
        await callback.message.answer(response)
    except ValueError as e:
        await callback.message.answer(str(e))
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")