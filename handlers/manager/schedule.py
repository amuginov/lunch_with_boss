from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.user_states import LunchSlotCreationStates
from keyboards.manager import manager_keyboard, generate_date_inline_keyboard, generate_time_inline_keyboard, generate_slots_keyboard
from utils.common import return_to_main_menu
from services.schedule_service import (
    get_manager_slots,
    add_lunch_slot,
    get_slot_details,
    remove_lunch_slot,
)
from datetime import datetime
from db.crud import get_user_by_telegram_id  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

router = Router()

@router.message(Command(commands=["schedule"]))
async def schedule_command(message: Message):
    await message.answer("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")

@router.message(F.text == "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ –æ–±–µ–¥–æ–≤")
async def start_lunch_slot_creation(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ª–æ—Ç–∞:", reply_markup=generate_date_inline_keyboard())
    await state.set_state(LunchSlotCreationStates.waiting_for_date)

@router.message(F.text == "üìÖ –ù–æ–≤—ã–π —Å–ª–æ—Ç")
async def start_lunch_slot_creation(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ª–æ—Ç–∞:", reply_markup=generate_date_inline_keyboard())
    await state.set_state(LunchSlotCreationStates.waiting_for_date)

@router.message(F.text == "üìã –ú–æ–∏ —Å–ª–æ—Ç—ã")
async def view_slots(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)  # –£–±—Ä–∞–ª–∏ await
    if not user or user.role != "manager":
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")
        return

    manager_slots = await get_manager_slots(user.id)

    if not manager_slots:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
        return

    keyboard = generate_slots_keyboard(manager_slots)
    await message.answer("–í–∞—à–∏ —Å–ª–æ—Ç—ã:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("select_date:"))
async def get_date(callback: CallbackQuery, state: FSMContext):
    try:
        slot_date = datetime.strptime(callback.data.split(":")[1], "%Y-%m-%d").date()
        await state.update_data(date=slot_date)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞:", reply_markup=generate_time_inline_keyboard())
        await state.set_state(LunchSlotCreationStates.waiting_for_time)
    except ValueError as e:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤—ã–±—Ä–∞–≤ –¥–∞—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")


@router.callback_query(F.data.startswith("select_time:"))
async def get_time(callback: CallbackQuery, state: FSMContext):
    try:
        time_data = ":".join(callback.data.split(":")[1:])
        start_time = datetime.strptime(time_data, "%H:%M").time()

        slot_data = await state.get_data()
        if "date" not in slot_data:
            await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        user = get_user_by_telegram_id(callback.from_user.id)  # –£–±—Ä–∞–ª–∏ await
        if not user:
            await callback.message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç
        try:
            await add_lunch_slot(
                date=slot_data["date"],
                start_time=start_time,
                manager_id=user.id
            )
            await callback.message.answer("–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except ValueError as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")

        await return_to_main_menu(callback.message, "manager", manager_keyboard())
        await state.clear()
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data.startswith("slot_detail:"))
async def slot_details(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])

    try:
        slot = await get_slot_details(slot_id)

        formatted_date = slot.date.strftime("%A, %d %B")
        formatted_time = slot.start_time.strftime("%H:%M")
        response = (
            f"–î–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞:\n"
            f"- –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {formatted_date}\n"
            f"- –í—Ä–µ–º—è: {formatted_time}\n"
            f"- –ú–µ–Ω–µ–¥–∂–µ—Ä: {slot.manager.full_name}"
        )
        await callback.message.answer(response)
    except ValueError as e:
        await callback.message.answer(str(e))
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–ª–æ—Ç–∞: {e}")


@router.callback_query(F.data.startswith("delete_slot:"))
async def delete_slot(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])

    try:
        await remove_lunch_slot(slot_id)
        await callback.message.answer("–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")