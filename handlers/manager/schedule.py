from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.user_states import LunchSlotCreationStates
from db.crud import create_lunch_slot, get_user_by_telegram_id
from keyboards.manager import generate_date_keyboard, generate_time_keyboard
from datetime import datetime

router = Router()

@router.message(Command(commands=["schedule"]))
async def schedule_command(message: Message):
    await message.answer("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")

@router.message(F.text == "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ –æ–±–µ–¥–æ–≤")
async def start_lunch_slot_creation(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ª–æ—Ç–∞:", reply_markup=generate_date_keyboard())
    await state.set_state(LunchSlotCreationStates.waiting_for_date)

@router.message(LunchSlotCreationStates.waiting_for_date)
async def get_date(message: Message, state: FSMContext):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –¥–∞—Ç—É
        slot_date = datetime.strptime(message.text, "%A, %d %B").date()
        await state.update_data(date=slot_date)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞:", reply_markup=generate_time_keyboard())
        await state.set_state(LunchSlotCreationStates.waiting_for_time)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤—ã–±—Ä–∞–≤ –¥–∞—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")

@router.message(LunchSlotCreationStates.waiting_for_time)
async def get_time(message: Message, state: FSMContext):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –≤—Ä–µ–º—è
        start_time = datetime.strptime(message.text, "%H:%M").time()
        slot_data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = get_user_by_telegram_id(message.from_user.id)
        if not user or user.role != "manager":
            await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç
        create_lunch_slot(
            date=slot_data["date"],
            start_time=start_time,
            manager_id=user.id  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        )
        await message.answer("–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤—ã–±—Ä–∞–≤ –≤—Ä–µ–º—è –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()