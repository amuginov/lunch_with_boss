from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.user_states import LunchSlotCreationStates
from db.crud import create_lunch_slot, get_user_by_telegram_id, get_all_lunch_slots
from keyboards.manager import manager_keyboard, generate_date_inline_keyboard, generate_time_inline_keyboard, generate_slots_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º manager_keyboard, generate_date_inline_keyboard, generate_time_inline_keyboard –∏ generate_slots_keyboard
from keyboards.admin import admin_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º admin_keyboard
from keyboards.employee import employee_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º employee_keyboard
from datetime import datetime, timedelta
from utils.back_to_start_menu import return_to_main_menu
from db.models import LunchSlot
from db.database import SessionLocal

router = Router()

@router.message(Command(commands=["schedule"]))
async def schedule_command(message: Message):
    await message.answer("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")

@router.message(F.text == "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ –æ–±–µ–¥–æ–≤")
async def start_lunch_slot_creation(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ª–æ—Ç–∞:", reply_markup=generate_date_inline_keyboard())
    await state.set_state(LunchSlotCreationStates.waiting_for_date)

@router.message(F.text == "üìÖ –ù–æ–≤—ã–π —Å–ª–æ—Ç")
async def start_lunch_slot_creation(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìÖ –ù–æ–≤—ã–π —Å–ª–æ—Ç".
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ª–æ—Ç–∞:", reply_markup=generate_date_inline_keyboard())
    await state.set_state(LunchSlotCreationStates.waiting_for_date)

@router.message(F.text == "üìã –ú–æ–∏ —Å–ª–æ—Ç—ã")
async def view_slots(message: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –∫–Ω–æ–ø–æ–∫.
    """
    user = get_user_by_telegram_id(message.from_user.id)
    if not user or user.role != "manager":
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    all_slots = get_all_lunch_slots()
    today = datetime.now().date()
    manager_slots = [
        slot for slot in all_slots
        if slot.manager_id == user.id and slot.date >= today
    ]

    if not manager_slots:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ª–æ—Ç–∞–º–∏
    keyboard = generate_slots_keyboard(manager_slots)
    await message.answer("–í–∞—à–∏ —Å–ª–æ—Ç—ã:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("select_date:"))
async def get_date(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫–∏.
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–ü–æ–ª—É—á–µ–Ω–æ callback_data: {callback.data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        slot_date = datetime.strptime(callback.data.split(":")[1], "%Y-%m-%d").date()
        print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {slot_date}")

        await state.update_data(date=slot_date)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞:", reply_markup=generate_time_inline_keyboard())
        await state.set_state(LunchSlotCreationStates.waiting_for_time)
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤—ã–±—Ä–∞–≤ –¥–∞—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")

@router.callback_query(F.data.startswith("select_time:"))
async def get_time(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫–∏.
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–ü–æ–ª—É—á–µ–Ω–æ callback_data: {callback.data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
        time_data = ":".join(callback.data.split(":")[1:])  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        print(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {time_data}")

        start_time = datetime.strptime(time_data, "%H:%M").time()
        print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {start_time}")

        slot_data = await state.get_data()
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {slot_data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ "date" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if "date" not in slot_data:
            await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞
        existing_slots = get_all_lunch_slots()
        for slot in existing_slots:
            if slot.date == slot_data["date"] and slot.start_time == start_time and slot.manager_id == user.id:
                await callback.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –í—ã —Ä–∞–Ω–µ–µ —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ—Ç.")
                await state.clear()
                return

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç
        create_lunch_slot(
            date=slot_data["date"],
            start_time=start_time,
            manager_id=user.id  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        )
        await callback.message.answer("–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await return_to_main_menu(callback.message, user.role)

        await state.clear()
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤—ã–±—Ä–∞–≤ –≤—Ä–µ–º—è –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data.startswith("slot_detail:"))
async def slot_details(callback: CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Å–ª–æ—Ç–∞.
    """
    slot_id = int(callback.data.split(":")[1])

    with SessionLocal() as session:
        slot = session.query(LunchSlot).filter(LunchSlot.id == slot_id).first()
        if not slot:
            await callback.message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        formatted_date = slot.date.strftime("%A, %d %B")
        formatted_time = slot.start_time.strftime("%H:%M")
        response = (
            f"–î–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞:\n"
            f"- –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {formatted_date}\n"
            f"- –í—Ä–µ–º—è: {formatted_time}\n"
            f"- –ú–µ–Ω–µ–¥–∂–µ—Ä: {slot.manager.full_name}"
        )
        await callback.message.answer(response)


@router.callback_query(F.data.startswith("delete_slot:"))
async def delete_slot(callback: CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞.
    """
    slot_id = int(callback.data.split(":")[1])

    with SessionLocal() as session:
        slot = session.query(LunchSlot).filter(LunchSlot.id == slot_id).first()
        if not slot:
            await callback.message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        session.delete(slot)
        session.commit()

        await callback.message.answer("–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")